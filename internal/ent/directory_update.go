// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nvthongswansea/xtreme/internal/ent/directory"
	"github.com/nvthongswansea/xtreme/internal/ent/file"
	"github.com/nvthongswansea/xtreme/internal/ent/predicate"
	"github.com/nvthongswansea/xtreme/internal/ent/user"
)

// DirectoryUpdate is the builder for updating Directory entities.
type DirectoryUpdate struct {
	config
	hooks    []Hook
	mutation *DirectoryMutation
}

// Where adds a new predicate for the DirectoryUpdate builder.
func (du *DirectoryUpdate) Where(ps ...predicate.Directory) *DirectoryUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetName sets the "name" field.
func (du *DirectoryUpdate) SetName(s string) *DirectoryUpdate {
	du.mutation.SetName(s)
	return du
}

// SetPath sets the "path" field.
func (du *DirectoryUpdate) SetPath(s string) *DirectoryUpdate {
	du.mutation.SetPath(s)
	return du
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (du *DirectoryUpdate) SetNillablePath(s *string) *DirectoryUpdate {
	if s != nil {
		du.SetPath(*s)
	}
	return du
}

// SetIsDeleted sets the "is_deleted" field.
func (du *DirectoryUpdate) SetIsDeleted(b bool) *DirectoryUpdate {
	du.mutation.SetIsDeleted(b)
	return du
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (du *DirectoryUpdate) SetNillableIsDeleted(b *bool) *DirectoryUpdate {
	if b != nil {
		du.SetIsDeleted(*b)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DirectoryUpdate) SetUpdatedAt(t time.Time) *DirectoryUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (du *DirectoryUpdate) SetOwnerID(id string) *DirectoryUpdate {
	du.mutation.SetOwnerID(id)
	return du
}

// SetOwner sets the "owner" edge to the User entity.
func (du *DirectoryUpdate) SetOwner(u *User) *DirectoryUpdate {
	return du.SetOwnerID(u.ID)
}

// AddChildFileIDs adds the "childFiles" edge to the File entity by IDs.
func (du *DirectoryUpdate) AddChildFileIDs(ids ...string) *DirectoryUpdate {
	du.mutation.AddChildFileIDs(ids...)
	return du
}

// AddChildFiles adds the "childFiles" edges to the File entity.
func (du *DirectoryUpdate) AddChildFiles(f ...*File) *DirectoryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.AddChildFileIDs(ids...)
}

// SetParentID sets the "parent" edge to the Directory entity by ID.
func (du *DirectoryUpdate) SetParentID(id string) *DirectoryUpdate {
	du.mutation.SetParentID(id)
	return du
}

// SetNillableParentID sets the "parent" edge to the Directory entity by ID if the given value is not nil.
func (du *DirectoryUpdate) SetNillableParentID(id *string) *DirectoryUpdate {
	if id != nil {
		du = du.SetParentID(*id)
	}
	return du
}

// SetParent sets the "parent" edge to the Directory entity.
func (du *DirectoryUpdate) SetParent(d *Directory) *DirectoryUpdate {
	return du.SetParentID(d.ID)
}

// AddChildDirIDs adds the "childDirs" edge to the Directory entity by IDs.
func (du *DirectoryUpdate) AddChildDirIDs(ids ...string) *DirectoryUpdate {
	du.mutation.AddChildDirIDs(ids...)
	return du
}

// AddChildDirs adds the "childDirs" edges to the Directory entity.
func (du *DirectoryUpdate) AddChildDirs(d ...*Directory) *DirectoryUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddChildDirIDs(ids...)
}

// Mutation returns the DirectoryMutation object of the builder.
func (du *DirectoryUpdate) Mutation() *DirectoryMutation {
	return du.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (du *DirectoryUpdate) ClearOwner() *DirectoryUpdate {
	du.mutation.ClearOwner()
	return du
}

// ClearChildFiles clears all "childFiles" edges to the File entity.
func (du *DirectoryUpdate) ClearChildFiles() *DirectoryUpdate {
	du.mutation.ClearChildFiles()
	return du
}

// RemoveChildFileIDs removes the "childFiles" edge to File entities by IDs.
func (du *DirectoryUpdate) RemoveChildFileIDs(ids ...string) *DirectoryUpdate {
	du.mutation.RemoveChildFileIDs(ids...)
	return du
}

// RemoveChildFiles removes "childFiles" edges to File entities.
func (du *DirectoryUpdate) RemoveChildFiles(f ...*File) *DirectoryUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.RemoveChildFileIDs(ids...)
}

// ClearParent clears the "parent" edge to the Directory entity.
func (du *DirectoryUpdate) ClearParent() *DirectoryUpdate {
	du.mutation.ClearParent()
	return du
}

// ClearChildDirs clears all "childDirs" edges to the Directory entity.
func (du *DirectoryUpdate) ClearChildDirs() *DirectoryUpdate {
	du.mutation.ClearChildDirs()
	return du
}

// RemoveChildDirIDs removes the "childDirs" edge to Directory entities by IDs.
func (du *DirectoryUpdate) RemoveChildDirIDs(ids ...string) *DirectoryUpdate {
	du.mutation.RemoveChildDirIDs(ids...)
	return du
}

// RemoveChildDirs removes "childDirs" edges to Directory entities.
func (du *DirectoryUpdate) RemoveChildDirs(d ...*Directory) *DirectoryUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveChildDirIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DirectoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DirectoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirectoryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirectoryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirectoryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DirectoryUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := directory.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DirectoryUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := directory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := du.mutation.OwnerID(); du.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (du *DirectoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   directory.Table,
			Columns: directory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: directory.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: directory.FieldName,
		})
	}
	if value, ok := du.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: directory.FieldPath,
		})
	}
	if value, ok := du.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: directory.FieldIsDeleted,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: directory.FieldUpdatedAt,
		})
	}
	if du.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.OwnerTable,
			Columns: []string{directory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.OwnerTable,
			Columns: []string{directory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildFilesIDs(); len(nodes) > 0 && !du.mutation.ChildFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ChildDirsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedChildDirsIDs(); len(nodes) > 0 && !du.mutation.ChildDirsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ChildDirsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DirectoryUpdateOne is the builder for updating a single Directory entity.
type DirectoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DirectoryMutation
}

// SetName sets the "name" field.
func (duo *DirectoryUpdateOne) SetName(s string) *DirectoryUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetPath sets the "path" field.
func (duo *DirectoryUpdateOne) SetPath(s string) *DirectoryUpdateOne {
	duo.mutation.SetPath(s)
	return duo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillablePath(s *string) *DirectoryUpdateOne {
	if s != nil {
		duo.SetPath(*s)
	}
	return duo
}

// SetIsDeleted sets the "is_deleted" field.
func (duo *DirectoryUpdateOne) SetIsDeleted(b bool) *DirectoryUpdateOne {
	duo.mutation.SetIsDeleted(b)
	return duo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillableIsDeleted(b *bool) *DirectoryUpdateOne {
	if b != nil {
		duo.SetIsDeleted(*b)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DirectoryUpdateOne) SetUpdatedAt(t time.Time) *DirectoryUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (duo *DirectoryUpdateOne) SetOwnerID(id string) *DirectoryUpdateOne {
	duo.mutation.SetOwnerID(id)
	return duo
}

// SetOwner sets the "owner" edge to the User entity.
func (duo *DirectoryUpdateOne) SetOwner(u *User) *DirectoryUpdateOne {
	return duo.SetOwnerID(u.ID)
}

// AddChildFileIDs adds the "childFiles" edge to the File entity by IDs.
func (duo *DirectoryUpdateOne) AddChildFileIDs(ids ...string) *DirectoryUpdateOne {
	duo.mutation.AddChildFileIDs(ids...)
	return duo
}

// AddChildFiles adds the "childFiles" edges to the File entity.
func (duo *DirectoryUpdateOne) AddChildFiles(f ...*File) *DirectoryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.AddChildFileIDs(ids...)
}

// SetParentID sets the "parent" edge to the Directory entity by ID.
func (duo *DirectoryUpdateOne) SetParentID(id string) *DirectoryUpdateOne {
	duo.mutation.SetParentID(id)
	return duo
}

// SetNillableParentID sets the "parent" edge to the Directory entity by ID if the given value is not nil.
func (duo *DirectoryUpdateOne) SetNillableParentID(id *string) *DirectoryUpdateOne {
	if id != nil {
		duo = duo.SetParentID(*id)
	}
	return duo
}

// SetParent sets the "parent" edge to the Directory entity.
func (duo *DirectoryUpdateOne) SetParent(d *Directory) *DirectoryUpdateOne {
	return duo.SetParentID(d.ID)
}

// AddChildDirIDs adds the "childDirs" edge to the Directory entity by IDs.
func (duo *DirectoryUpdateOne) AddChildDirIDs(ids ...string) *DirectoryUpdateOne {
	duo.mutation.AddChildDirIDs(ids...)
	return duo
}

// AddChildDirs adds the "childDirs" edges to the Directory entity.
func (duo *DirectoryUpdateOne) AddChildDirs(d ...*Directory) *DirectoryUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddChildDirIDs(ids...)
}

// Mutation returns the DirectoryMutation object of the builder.
func (duo *DirectoryUpdateOne) Mutation() *DirectoryMutation {
	return duo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (duo *DirectoryUpdateOne) ClearOwner() *DirectoryUpdateOne {
	duo.mutation.ClearOwner()
	return duo
}

// ClearChildFiles clears all "childFiles" edges to the File entity.
func (duo *DirectoryUpdateOne) ClearChildFiles() *DirectoryUpdateOne {
	duo.mutation.ClearChildFiles()
	return duo
}

// RemoveChildFileIDs removes the "childFiles" edge to File entities by IDs.
func (duo *DirectoryUpdateOne) RemoveChildFileIDs(ids ...string) *DirectoryUpdateOne {
	duo.mutation.RemoveChildFileIDs(ids...)
	return duo
}

// RemoveChildFiles removes "childFiles" edges to File entities.
func (duo *DirectoryUpdateOne) RemoveChildFiles(f ...*File) *DirectoryUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.RemoveChildFileIDs(ids...)
}

// ClearParent clears the "parent" edge to the Directory entity.
func (duo *DirectoryUpdateOne) ClearParent() *DirectoryUpdateOne {
	duo.mutation.ClearParent()
	return duo
}

// ClearChildDirs clears all "childDirs" edges to the Directory entity.
func (duo *DirectoryUpdateOne) ClearChildDirs() *DirectoryUpdateOne {
	duo.mutation.ClearChildDirs()
	return duo
}

// RemoveChildDirIDs removes the "childDirs" edge to Directory entities by IDs.
func (duo *DirectoryUpdateOne) RemoveChildDirIDs(ids ...string) *DirectoryUpdateOne {
	duo.mutation.RemoveChildDirIDs(ids...)
	return duo
}

// RemoveChildDirs removes "childDirs" edges to Directory entities.
func (duo *DirectoryUpdateOne) RemoveChildDirs(d ...*Directory) *DirectoryUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveChildDirIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DirectoryUpdateOne) Select(field string, fields ...string) *DirectoryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Directory entity.
func (duo *DirectoryUpdateOne) Save(ctx context.Context) (*Directory, error) {
	var (
		err  error
		node *Directory
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DirectoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirectoryUpdateOne) SaveX(ctx context.Context) *Directory {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DirectoryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirectoryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DirectoryUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := directory.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DirectoryUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := directory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := duo.mutation.OwnerID(); duo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (duo *DirectoryUpdateOne) sqlSave(ctx context.Context) (_node *Directory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   directory.Table,
			Columns: directory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: directory.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Directory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directory.FieldID)
		for _, f := range fields {
			if !directory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != directory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: directory.FieldName,
		})
	}
	if value, ok := duo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: directory.FieldPath,
		})
	}
	if value, ok := duo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: directory.FieldIsDeleted,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: directory.FieldUpdatedAt,
		})
	}
	if duo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.OwnerTable,
			Columns: []string{directory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.OwnerTable,
			Columns: []string{directory.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildFilesIDs(); len(nodes) > 0 && !duo.mutation.ChildFilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildFilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildFilesTable,
			Columns: []string{directory.ChildFilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directory.ParentTable,
			Columns: []string{directory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ChildDirsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedChildDirsIDs(); len(nodes) > 0 && !duo.mutation.ChildDirsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ChildDirsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   directory.ChildDirsTable,
			Columns: []string{directory.ChildDirsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: directory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Directory{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
