// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DirectoriesColumns holds the columns for the "directories" table.
	DirectoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "path", Type: field.TypeString},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "directory_child_dirs", Type: field.TypeString, Nullable: true},
		{Name: "user_directories", Type: field.TypeString, Nullable: true},
	}
	// DirectoriesTable holds the schema information for the "directories" table.
	DirectoriesTable = &schema.Table{
		Name:       "directories",
		Columns:    DirectoriesColumns,
		PrimaryKey: []*schema.Column{DirectoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "directories_directories_childDirs",
				Columns:    []*schema.Column{DirectoriesColumns[6]},
				RefColumns: []*schema.Column{DirectoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "directories_users_directories",
				Columns:    []*schema.Column{DirectoriesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "directory_name_directory_child_dirs",
				Unique:  true,
				Columns: []*schema.Column{DirectoriesColumns[1], DirectoriesColumns[6]},
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "mime_type", Type: field.TypeString, Default: "unknown"},
		{Name: "path", Type: field.TypeString},
		{Name: "rel_path_on_disk", Type: field.TypeString, Unique: true},
		{Name: "size", Type: field.TypeInt64},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "directory_child_files", Type: field.TypeString, Nullable: true},
		{Name: "user_files", Type: field.TypeString, Nullable: true},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_directories_childFiles",
				Columns:    []*schema.Column{FilesColumns[9]},
				RefColumns: []*schema.Column{DirectoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "files_users_files",
				Columns:    []*schema.Column{FilesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "file_name_directory_child_files",
				Unique:  true,
				Columns: []*schema.Column{FilesColumns[1], FilesColumns[9]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DirectoriesTable,
		FilesTable,
		UsersTable,
	}
)

func init() {
	DirectoriesTable.ForeignKeys[0].RefTable = DirectoriesTable
	DirectoriesTable.ForeignKeys[1].RefTable = UsersTable
	FilesTable.ForeignKeys[0].RefTable = DirectoriesTable
	FilesTable.ForeignKeys[1].RefTable = UsersTable
}
