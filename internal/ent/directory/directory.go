// Code generated by entc, DO NOT EDIT.

package directory

import (
	"time"
)

const (
	// Label holds the string label denoting the directory type in the database.
	Label = "directory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeChildFiles holds the string denoting the childfiles edge name in mutations.
	EdgeChildFiles = "childFiles"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildDirs holds the string denoting the childdirs edge name in mutations.
	EdgeChildDirs = "childDirs"
	// Table holds the table name of the directory in the database.
	Table = "directories"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "directories"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_directories"
	// ChildFilesTable is the table the holds the childFiles relation/edge.
	ChildFilesTable = "files"
	// ChildFilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	ChildFilesInverseTable = "files"
	// ChildFilesColumn is the table column denoting the childFiles relation/edge.
	ChildFilesColumn = "directory_child_files"
	// ParentTable is the table the holds the parent relation/edge.
	ParentTable = "directories"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "directory_child_dirs"
	// ChildDirsTable is the table the holds the childDirs relation/edge.
	ChildDirsTable = "directories"
	// ChildDirsColumn is the table column denoting the childDirs relation/edge.
	ChildDirsColumn = "directory_child_dirs"
)

// Columns holds all SQL columns for directory fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPath,
	FieldIsDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "directories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"directory_child_dirs",
	"user_directories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
